import os
import logging
import subprocess
import shutil
from uuid import uuid4
import time
import json
import glob
from math import ceil

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputMediaVideo
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters, CallbackContext,
    ConversationHandler, CallbackQueryHandler
)

# --- TEMEL AYARLAR ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- Ã‡OKLU DÄ°L DESTEÄžÄ° ---
TRANSLATIONS = {}
# KullanÄ±cÄ±larÄ±n dil tercihlerini saklamak iÃ§in bellek iÃ§i sÃ¶zlÃ¼k
# Not: Bot yeniden baÅŸladÄ±ÄŸÄ±nda bu bilgiler kaybolur.
USER_LANGS = {}
# KonuÅŸma durumlarÄ±
SELECTING_LANGUAGE = 0

def load_translations():
    """locales klasÃ¶rÃ¼ndeki tÃ¼m .json dosyalarÄ±nÄ± yÃ¼kler."""
    global TRANSLATIONS
    lang_files = glob.glob("locales/*.json")
    for file in lang_files:
        lang_code = os.path.basename(file).split('.')[0]
        try:
            with open(file, 'r', encoding='utf-8') as f:
                TRANSLATIONS[lang_code] = json.load(f)
            logger.info(f"{lang_code} dil dosyasÄ± baÅŸarÄ±yla yÃ¼klendi.")
        except Exception as e:
            logger.error(f"{file} dil dosyasÄ± yÃ¼klenirken hata: {e}")

def get_user_language(update: Update) -> str:
    """KullanÄ±cÄ±nÄ±n seÃ§tiÄŸi dili alÄ±r, yoksa varsayÄ±lanÄ± dÃ¶ner."""
    user_id = update.effective_user.id
    # Otomatik dil kodunu al, ama Ã¶ncelik kullanÄ±cÄ±nÄ±n seÃ§imi
    auto_lang_code = (update.effective_user.language_code or 'en').split('-')[0]
    return USER_LANGS.get(user_id, auto_lang_code)

def get_translation(lang_code, key, **kwargs):
    """Belirtilen dildeki metni alÄ±r, bulamazsa varsayÄ±lan dile dÃ¶ner."""
    base_lang_code = lang_code.split('-')[0]
    lang_to_try = [lang_code, base_lang_code, 'en']

    message = f"Translation key '{key}' not found."
    for lang in lang_to_try:
        if lang in TRANSLATIONS and key in TRANSLATIONS[lang]:
            message = TRANSLATIONS[lang][key]
            break
    return message.format(**kwargs)

# --- ORTAM DEÄžÄ°ÅžKENLERÄ° ---
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SESSION_ID = os.getenv("INSTAGRAM_SESSIONID")

if not TELEGRAM_TOKEN:
    logger.critical("TELEGRAM_TOKEN ortam deÄŸiÅŸkeni eksik. Uygulama baÅŸlatÄ±lamÄ±yor.")
    exit()

# --- YARDIMCI FONKSÄ°YONLAR ---
def create_cookie_file(session_id_value: str, user_id: str) -> str:
    if not session_id_value: return None
    cookie_file_path = f"temp_cookie_{user_id}_{uuid4()}.txt"
    header = "# Netscape HTTP Cookie File\n# http://www.netscape.com/newsref/std/cookie_spec.html\n# This is a generated file!  Do not edit.\n\n"
    expiration_timestamp = int(time.time()) + (10 * 365 * 24 * 60 * 60)
    cookie_line = f".instagram.com\tTRUE\t/\tTRUE\t{expiration_timestamp}\tsessionid\t{session_id_value}\n"
    try:
        with open(cookie_file_path, 'w', encoding='utf-8') as f: f.write(header + cookie_line)
        return cookie_file_path
    except Exception as e:
        logger.error(f"Cookie dosyasÄ± oluÅŸturulurken hata: {e}")
        return None

def cleanup_files(*paths):
    for path in paths:
        if not path: continue
        try:
            if os.path.isfile(path): os.remove(path)
            elif os.path.isdir(path): shutil.rmtree(path)
        except Exception as e:
            logger.error(f"{path} silinirken hata: {e}")

# --- TELEGRAM HANDLER'LARI ---

# --- Dil SeÃ§imi Conversation ---
def start(update: Update, context: CallbackContext) -> int:
    """/start komutu ile dil seÃ§imi baÅŸlatÄ±r."""
    keyboard = [
        [InlineKeyboardButton("TÃ¼rkÃ§e ðŸ‡¹ðŸ‡·", callback_data='tr')],
        [InlineKeyboardButton("English ðŸ‡¬ðŸ‡§", callback_data='en')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(get_translation('en', 'welcome_prompt'), reply_markup=reply_markup)
    return SELECTING_LANGUAGE

def language_button(update: Update, context: CallbackContext) -> int:
    """Dil seÃ§imi butonuna tÄ±klandÄ±ÄŸÄ±nda Ã§alÄ±ÅŸÄ±r."""
    query = update.callback_query
    query.answer()
    lang_code = query.data
    user_id = query.from_user.id
    user_name = query.from_user.first_name

    USER_LANGS[user_id] = lang_code
    logger.info(f"KullanÄ±cÄ± {user_id} dilini '{lang_code}' olarak ayarladÄ±.")

    text = get_translation(lang_code, "language_selected", user_name=user_name)
    query.edit_message_text(text=text, parse_mode='HTML')
    return ConversationHandler.END

def link_handler(update: Update, context: CallbackContext):
    user_lang = get_user_language(update)
    user_id = str(update.effective_user.id)
    post_url = update.message.text

    if "instagram.com/" not in post_url:
        update.message.reply_text(get_translation(user_lang, "invalid_link"))
        return

    message_to_edit = context.bot.send_message(chat_id=user_id, text=get_translation(user_lang, "request_received"))

    cookie_file = create_cookie_file(SESSION_ID, user_id) if SESSION_ID else None
    download_dir = f"temp_dl_{user_id}_{uuid4()}"
    os.makedirs(download_dir, exist_ok=True)

    # -f (format) parametresini kaldÄ±rarak tÃ¼m medyalarÄ± indir
    yt_dlp_command = ['yt-dlp', '--no-warnings', '--force-overwrites', '--no-playlist', '--socket-timeout', '60', '-o', os.path.join(download_dir, '%(id)s_%(n)s.%(ext)s')]
    if cookie_file: yt_dlp_command.extend(['--cookies', cookie_file])
    yt_dlp_command.append(post_url)

    try:
        process = subprocess.run(yt_dlp_command, capture_output=True, text=True, check=False, timeout=300)
        if process.returncode == 0:
            downloaded_files = sorted([os.path.join(download_dir, f) for f in os.listdir(download_dir)])
            if not downloaded_files:
                raise FileNotFoundError("yt-dlp klasÃ¶rÃ¼ boÅŸ.")

            # MedyalarÄ± 10'arlÄ± gruplara ayÄ±r (Telegram limiti)
            media_groups = [downloaded_files[i:i + 10] for i in range(0, len(downloaded_files), 10)]

            # Ä°lk mesajÄ± sil veya dÃ¼zenle
            message_to_edit.delete()

            for i, group in enumerate(media_groups):
                media_to_send = []
                for file_path in group:
                    if file_path.endswith(('.jpg', '.jpeg', '.png', '.webp')):
                        media_to_send.append(InputMediaPhoto(media=open(file_path, 'rb')))
                    elif file_path.endswith(('.mp4', '.mkv', '.webm')):
                        media_to_send.append(InputMediaVideo(media=open(file_path, 'rb')))

                if media_to_send:
                    # Sadece ilk gruba baÅŸlÄ±k ekle
                    if i == 0:
                        media_to_send[0].caption = get_translation(user_lang, "download_success_caption")

                    context.bot.send_media_group(chat_id=user_id, media=media_to_send, timeout=180)
        else:
            raise Exception(f"yt-dlp hata kodu: {process.returncode}. stderr: {process.stderr}")

    except Exception as e:
        message_to_edit.delete()
        error_text = str(e).lower()
        logger.error(f"Ä°ndirme hatasÄ±: {e}")
        if "login required" in error_text or "private" in error_text:
            update.message.reply_text(get_translation(user_lang, "error_private_video"))
        elif "unsupported url" in error_text:
            update.message.reply_text(get_translation(user_lang, "error_unsupported_url"))
        elif "403" in error_text or "forbidden" in error_text:
             update.message.reply_text(get_translation(user_lang, "error_forbidden"))
        elif "timed out" in error_text:
            update.message.reply_text(get_translation(user_lang, "error_timeout"))
        else:
            update.message.reply_text(get_translation(user_lang, "error_yt_dlp"))
    finally:
        cleanup_files(cookie_file, download_dir)

def error_handler(update: Update, context: CallbackContext):
    logger.error(f"Update '{update}' caused error '{context.error}'", exc_info=context.error)
    if update and update.effective_message:
        user_lang = get_user_language(update)
        update.effective_message.reply_text(get_translation(user_lang, "error_generic"))

# --- ANA UYGULAMA FONKSÄ°YONU ---
def main():
    load_translations()
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    # Dil seÃ§imi iÃ§in ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SELECTING_LANGUAGE: [CallbackQueryHandler(language_button)],
        },
        fallbacks=[CommandHandler('start', start)],
    )

    dispatcher.add_handler(conv_handler)
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command & Filters.regex(r'https?://www\.instagram\.com/(p|reel|tv|stories)/\S+'), link_handler))
    dispatcher.add_error_handler(error_handler)

    updater.start_polling()
    logger.info("Bot baÅŸlatÄ±ldÄ± ve Render Ã¼zerinde Ã§alÄ±ÅŸÄ±yor (manuel dil seÃ§imi + Ã§oklu medya).")
    updater.idle()
    logger.info("Bot polling sonlandÄ±rÄ±ldÄ±, uygulama kapatÄ±lÄ±yor.")

if __name__ == '__main__':
    main()
