name: Instagram Video Downloader Action

on:
  workflow_dispatch:
    inputs:
      instagram_url:
        description: 'Instagram video URL to download'
        required: true
        type: string
      chat_id:
        description: 'Telegram Chat ID to send the video to'
        required: true
        type: string

jobs:
  download-and-send:
    runs-on: ubuntu-latest
    # Timeout'u tek bir indirme işlemi için daha kısa tutalım, örn: 20 dakika
    timeout-minutes: 20
    env:
      # Bu secret, Koyeb'deki ana botun Telegram token'ı olacak
      # ve Actions'ın videoyu kullanıcıya göndermesi için kullanılacak.
      BOT_TOKEN_FOR_ACTIONS: ${{ secrets.BOT_TOKEN_FOR_ACTIONS }}
      INSTAGRAM_SESSIONID: ${{ secrets.INSTAGRAM_SESSIONID }} # Opsiyonel

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4 # checkout@v3 veya @v4 kullanılabilir

    - name: Set up Python
      uses: actions/setup-python@v4 # setup-python@v3 veya @v4
      with:
        python-version: '3.11'

    - name: Install ffmpeg
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ffmpeg

    - name: Install dependencies (yt-dlp, requests)
      run: |
        python -m pip install --upgrade pip
        # Sadece yt-dlp ve requests (eğer video gönderme script'i python ise) yeterli olacak
        # requirements.txt tüm bot bağımlılıklarını içeriyorsa o da kullanılabilir.
        # Şimdilik doğrudan kuralım:
        pip install yt-dlp requests

    - name: Download Video using yt-dlp
      id: download_video # Bu adıma bir id vererek çıktısını sonraki adımlarda kullanabiliriz
      run: |
        echo "Downloading video from: ${{ github.event.inputs.instagram_url }}"

        cookie_file_path="temp_cookie_${{ github.run_id }}_${{ github.run_attempt }}.txt"
        download_dir="temp_dl_${{ github.run_id }}_${{ github.run_attempt }}"
        mkdir -p "$download_dir"

        # Cookie dosyası oluşturma (eğer INSTAGRAM_SESSIONID varsa)
        if [ -n "$INSTAGRAM_SESSIONID" ]; then
          echo "Creating cookie file..."
          expiration_timestamp=$(($(date +%s) + 10*365*24*60*60))
          printf "# Netscape HTTP Cookie File\n" > "$cookie_file_path"
          printf "# http://www.netscape.com/newsref/std/cookie_spec.html\n" >> "$cookie_file_path"
          printf "# This is a generated file!  Do not edit.\n\n" >> "$cookie_file_path"
          printf ".instagram.com\tTRUE\t/\tTRUE\t%s\tsessionid\t%s\n" "$expiration_timestamp" "$INSTAGRAM_SESSIONID" >> "$cookie_file_path"
          cookie_arg="--cookies $cookie_file_path"
        else
          echo "No INSTAGRAM_SESSIONID provided, attempting anonymous download."
          cookie_arg=""
        fi

        # yt-dlp komutu
        # Çıktı dosya adını tahmin edilebilir yapmak için -o kullanalım ve sonra bu adı yakalayalım
        # %(title)s veya %(id)s kullanılabilir. Uzantı yt-dlp tarafından belirlenir.
        # Örnek: video_file.mp4
        output_template="$download_dir/downloaded_video.%(ext)s"

        echo "Running yt-dlp..."
        yt-dlp_exit_code=0
        # yt-dlp'nin çıktısını değişkene ata
        download_output=$(yt-dlp --no-warnings --force-overwrites --no-playlist \
          --socket-timeout 60 \
          -o "$output_template" \
          -f "bv*[ext=mp4]+ba[ext=m4a]/b[ext=mp4]/bv*+ba/b" \
          $cookie_arg \
          "${{ github.event.inputs.instagram_url }}" 2>&1) || yt-dlp_exit_code=$?

        echo "$download_output"

        if [ $yt_dlp_exit_code -ne 0 ]; then
          echo "::error title=yt-dlp Error::Failed to download video. Exit code: $yt_dlp_exit_code. Output: $download_output"
          # Hata mesajını Koyeb'deki bota (veya doğrudan kullanıcıya) göndermek zor olabilir.
          # Şimdilik sadece Actions'ta hata olarak işaretleyelim.
          # Koyeb'deki bot, Actions'ın başarılı olup olmadığını API ile sorgulayabilir veya timeout ile anlayabilir.
          exit 1
        fi

        # İndirilen dosyanın tam adını bul
        # `ls` komutuyla $download_dir içindeki dosyayı buluruz. Genelde tek dosya olmalı.
        video_file_path=$(ls -1 "$download_dir"/*.* | head -n 1)
        if [ -z "$video_file_path" ]; then
          echo "::error title=File Not Found::Downloaded video file not found in $download_dir."
          exit 1
        fi
        echo "Video downloaded to: $video_file_path"
        echo "video_path=$video_file_path" >> $GITHUB_OUTPUT # Sonraki adımda kullanmak için

    - name: Send Video to Telegram
      env:
        TELEGRAM_CHAT_ID: ${{ github.event.inputs.chat_id }}
        # BOT_TOKEN_FOR_ACTIONS secret'ı yukarıda env altında tanımlı
      run: |
        echo "Sending video to chat ID: $TELEGRAM_CHAT_ID"
        video_path="${{ steps.download_video.outputs.video_path }}"

        if [ ! -f "$video_path" ]; then
          echo "::error title=Video File Missing::Video file $video_path does not exist for sending."
          exit 1
        fi

        # Telegram API'sine curl ile video gönderme
        # Dosya boyutu Telegram limitlerini (50MB) aşabilir, bu kontrol edilebilir.
        # Ancak şimdilik direkt göndermeyi deneyelim.
        caption="Video requested for: ${{ github.event.inputs.instagram_url }}"

        curl_response_code=$(curl -s -o /dev/null -w "%{http_code}" \
          -F "chat_id=$TELEGRAM_CHAT_ID" \
          -F "video=@$video_path" \
          -F "caption=$caption" \
          "https://api.telegram.org/bot$BOT_TOKEN_FOR_ACTIONS/sendVideo")

        if [ "$curl_response_code" -eq 200 ]; then
          echo "Video sent successfully to Telegram."
        else
          echo "::error title=Telegram API Error::Failed to send video to Telegram. HTTP status: $curl_response_code."
          # Yanıtı da loglayabiliriz (eğer varsa)
          # curl -s -v -F "chat_id=$TELEGRAM_CHAT_ID" ... (yanıtı görmek için)
          exit 1
        fi

    - name: Clean up temporary files
      if: always() # Her zaman çalışsın (başarılı veya başarısız olsa da)
      run: |
        echo "Cleaning up temporary files..."
        rm -rf temp_dl_* temp_cookie_*
        echo "Cleanup complete."
